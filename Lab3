#Dimension reduction

#Downloading packages
install.packages("GGally") 
install.packages("corrr") 
install.packages("ggcorrplot") 
install.packages("FactoMineR") 
install.packages("factoextra") 
install.packages("paran")
install.packages("psych") 
install.packages("car") 
install.packages("GPArotation")
install.packages("MVN")
install.packages("ICS") 
install.packages("gt")

library(GGally) 
library(corrr)
library(ggcorrplot) 
library(FactoMineR) 
library(factoextra) 
library(paran) 
library(psych) 
library(car) 
library(GPArotation) 
library(MVN) 
library(ICS) 
library(tidyverse)
library(gt)
library(sjPlot)
library(sjmisc)
library(sjlabelled)

#Downloading data
animals_data = read.csv("C:\\Users\\noora\\Documents\\uni_R\\animalrights.csv")

#Exploring data

str(animals_data)
summary(animals_data)
tail(animals_data)

#Replacing missing values

#Replacing (ar1 - ar28) and 'liberal' with the median
median(animals_data$ar1, na.rm = TRUE)
median_value <- median(animals_data$ar1, na.rm = TRUE)
animals_data[is.na(animals_data$ar1), "ar1"] <- median_value

median(animals_data$ar2, na.rm = TRUE)
median_value_2 <- median(animals_data$ar2, na.rm = TRUE)
animals_data[is.na(animals_data$ar2), "ar2"] <- median_value_2

median(animals_data$ar10, na.rm = TRUE)
median_value_3 <- median(animals_data$ar10, na.rm = TRUE)
animals_data[is.na(animals_data$ar10), "ar10"] <- median_value_3

median(animals_data$ar14, na.rm = TRUE)
median_value_4 <- median(animals_data$ar14, na.rm = TRUE)
animals_data[is.na(animals_data$ar14), "ar14"] <- median_value_4

median(animals_data$ar18, na.rm = TRUE)
median_value_5 <- median(animals_data$ar18, na.rm = TRUE)
animals_data[is.na(animals_data$ar18), "ar18"] <- median_value_5

median(animals_data$ar19, na.rm = TRUE)
median_value_6 <- median(animals_data$ar19, na.rm = TRUE)
animals_data[is.na(animals_data$ar19), "ar19"] <- median_value_6

median(animals_data$ar22, na.rm = TRUE)
median_value_7 <- median(animals_data$ar22, na.rm = TRUE)
animals_data[is.na(animals_data$ar22), "ar22"] <- median_value_7

median(animals_data$liberal, na.rm = TRUE)
median_value_8 <- median(animals_data$liberal, na.rm = TRUE)
animals_data[is.na(animals_data$liberal), "liberal"] <- median_value_8

#Replacing 'sex' and 'party' with the mode
animals_data[is.na(animals_data$sex), "sex"] <- '1'
animals_data[is.na(animals_data$party), "party"] <- '4'

#Defining categorical variables as factors
animals_data = animals_data %>% 
  mutate(sex = factor(sex),
         party = factor(party))

#Correlation matrix
animals_data_views_only = animals_data %>%
  select(ar1:ar28)

cor =  animals_data_views_only %>%
  cor()

cor

ggcorr(cor)

cor(animals_data_views_only) %>%
  network_plot(min_cor = 0.6)

#Assumptions of factorability
KMO(cor)

bfi_factorability <- cortest.bartlett(cor)
bfi_factorability

#Multivariate normality test
result <- mvn(animals_data[, 1:28], mvnTest = "hz")
result$multivariateNormality

mvnorm.kur.test(na.omit(animals_data[, 1:28]))

mvnorm.skew.test(na.omit(animals_data[, 1:28]))

#PCA model scree test
pca_mod <- PCA(animals_data_views_only)

fviz_screeplot(pca_mod, addlabels = TRUE, ylim = c(0, 35))

#The Kaiser-Guttman rule
get_eigenvalue(pca_mod)

#Parallel Analysis Scree Plot
fa.parallel(cor, n.obs = nrow(animals_data), fa = "fa", fm = "pa")

#VSS 
nfactors(cor, n.obs = nrow(animals_data))

#EFA model testing
round1 <- fa(cor, nfactors = 4, fm = "pa", rotate = "varimax")
round1

round2 <- fa(cor, nfactors = 4, fm = "pa", rotate = "promax")
round2

round3 <- fa(cor, nfactors = 2, fm = "pa", rotate = "varimax")
round3

round4 <- fa(cor, nfactors = 2, fm = "pa", rotate = "promax")
round4

round5 <- fa(cor, nfactors = 5, fm = "pa", rotate = "varimax")
round5

round6 <- fa(cor, nfactors = 5, fm = "pa", rotate = "promax")
round6

#excluding items
round7  <- fa(cor[ , -c(3, 12, 14, 15, 16, 18, 24)], nfactors = 4, fm = "pa", rotate = "varimax")
round7

#Visualization
M1 <- fa(cor[ , -c(3, 12, 14, 15, 16, 18, 24)], nfactors = 4, fm = "pa", rotate = "varimax")
fa.diagram(M1)

#Naming the model
final_model <- round7
final_model

# Sorting commonality
EFA_mod1_common <- as.data.frame(sort(final_model$communality, decreasing = TRUE))
EFA_mod1_common

mean(EFA_mod1$communality)

#Table1
final_model$Vaccounted
         
#Saving factor scores
factor_scores = factor.scores(animals_data_views_only[,1:21], final_model)$scores
animals_with_factorscores = cbind(animals_data_views_only, factor_scores)

complete_data = cbind(animals_with_factorscores, animals_data)

#Linear regression
reg <- lm(liberal ~ PA1 + PA2 + PA3 + PA3, data = complete_data)

reg

tab_model(reg)
